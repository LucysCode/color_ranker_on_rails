<h1 style="text-align:center">Welcome to Color Ranker. You can rank ugly colors!</h1>
<h2 style="text-align:center">Is this color ugly?</h2>
<p style="text-align:center">Select up to <%= @max_colors %> ugly colors and <%= @max_colors %> great colors!</p>

<!-- Middle: Ugly | Color Box | Nice -->
<div style="display: flex; text-align:center; justify-content: center;">

  <div id="ugly_colors" class="sortable-list" style="flex: 1;">

    <% if @ugly_colors.present? %>
      <h3>Top Ugly Colors</h3>
      <ul id="ugly_colors_list" style="text-align: center; list-style-type:none; padding: 0;">

        <% @ugly_colors.take(@max_colors).each do |color_vote| %>
          <li data-id="<%= color_vote.id %>" style="flex-direction: column; margin: 10px 0; cursor: grab; display: flex; justify-content: center; margin-bottom: 30px;">
            <span style="font-weight: bold;">&nbsp;Rank:&nbsp;<span class="position-number" style="font-weight: normal;"><%= color_vote.position.to_i + 1 %></span></span>

            <div style="display: flex; flex-direction: column; align-items: center;">
              <div class="side-color-box" style= "background-color: <%= color_vote.hex_color %>;"></div>
              <p style="margin: 4px 0 0 0; font-size: 12px;">Hex: <%= color_vote.hex_color %></p>
            </div>
          </li>
        <% end %>
    
      </ul>
    <% end %>
  </div>


  <!-- Center Column: Color Box and Buttons -->
  <div style="flex: 1; text-align: center;">

    <!-- Logic to show the color box, unless the meme shows up. -->
    <% unless @show_pikachu %>
      <form method="get" action="<%= root_path %>">
        <input type="hidden" name="new_color" value="true" />
          <button type="submit" style="border: none; background: none; padding: 0; margin: 0px; cursor: pointer;">
            <div class="main-color-box" style="background-color: <%= @hex_color %>;"></div>
            <p>Hex Code: <%= @hex_color %></p>
          </button>  
      </form>  
    <% end %>

    <!-- Styling for meme -->
    <% if @show_pikachu %>
      <div style="text-align: center;">
        <img src="<%= @image_url %>" alt="Surprised Pikachu" class="meme-box" />
        <small style="font-size: 6px;">
          Image from
          <a href="https://knowyourmeme.com/memes/surprised-pikachu" target="_blank" rel="noopener noreferrer">
            Know Your Meme
          </a>
        </small>
        <p>Pikachu: I&rsquo;m surprised</p>
      </div>
    <% end %>

    <!-- Buttons to vote -->
    <div style="display: flex; justify-content: center; gap: 12px; max-width: 400px; margin: 0 auto;">
      <div style="flex: 1;">
        <button style="width: 100%;" onclick="submitVote('ugly')">
          Ew, it&rsquo;s ugly
        </button>
      </div>
      <div style="flex: 1;">
        <button style="width: 100%;" onclick="submitVote('nice')">
          Great color
        </button>
      </div>
    </div>

    <!-- Button to generate new color only -->
    <div>
      <form method="get" action="/">
        <input type="hidden" name="new_color" value="true">
        <button type="submit">Not sure, give me a new color</button>
      </form>
    </div>

    <!-- Reset button for votes -->
    <div style="display: flex; justify-content: center; gap: 12px; max-width: 400px; margin: 0 auto;">
      <form method="post" action="<%= reset_ugly_path %>" style="flex: 1;">
        <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
        <button type="submit" style="width: 100%;">Reset Ugly Only</button>
      </form>

      <form method="post" action="<%= reset_nice_path %>" style="flex: 1;">
        <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
        <button type="submit" style="width: 100%;">Reset Nice Only</button>
      </form>
    </div>

    <div>
      <form method="post" action="/reset">
        <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
        <button type="submit">Reset</button>
      </form>
    </div>

    <!-- Route to Color Pairs page -->
    <div style="margin-top: 69px; margin-bottom: 15px;">
      <%= link_to "Color Pairs Ranker", rank_color_pairs_path %>
    </div>
    
    <!-- Message for max votes, dependent on which vote is maxed. -->
    <% if flash[:notice] || @message %>
      <div id="<%= flash[:notice] ? 'flash-notice' : 'custom-message' %>" class="flash-message" style="color: red;">
        <%= flash[:notice] || @message %>
      </div>
    <% end %>


  </div>

  <!-- Right Column: Nice Colors -->
  <div id="nice_colors" class="sortable-list" style="flex: 1;">
    <% if @nice_colors.present? %>
      <h3>Top Nice Colors</h3>
      <ul id="nice_colors_list" style="text-align: center; list-style-type:none; padding: 0;">

        <% @nice_colors.take(@max_colors).each do |color_vote| %>
          <li data-id="<%= color_vote.id %>" style="flex-direction: column; margin: 10px 0; cursor: grab; display: flex; justify-content: center; margin-bottom: 30px;">
            <span style="font-weight: bold;">&nbsp;Rank:&nbsp;<span class="position-number" style="font-weight: normal;"><%= color_vote.position.to_i + 1 %></span></span>
            
            <div style="display: flex; flex-direction: column; align-items: center;">
              <div class="side-color-box" style= "background-color: <%= color_vote.hex_color %>;"></div>
              <p style="margin: 4px 0 0 0; font-size: 12px;">Hex: <%= color_vote.hex_color %></p>
            </div>
          </li>
        <% end %>
      
      </ul>
    <% end %>
  </div>


<!-- This is javascript. Use Javascript syntax. -->
<script>

// This creates a function called submitVote and takes in one parameter called 'vote'. In this case, vote is either 'ugly' or 'nice'
function submitVote(vote) {
  // A function that makes network requests. /vote is the route URL being called.
  fetch('/vote', { // Code between here and the next closing bracket is where you configure the request. Basically saying, 'send a request to /vote with this configuration.
    // 'POST' means I'm submitting data to the server. vs 'GET' which retrieves read-only data.
    method: 'POST',
    headers: {
      // Content-Type tells the server 'I'm sending JSON (JavaScript Object Notation) data in the body of this request, otherwise server wouldn't know how to parse the incoming data. 
      'Content-Type': 'application/json',
      // Token protects against CSRF attacks. This token is what Rails expects for Javascript.
      'X-CSRF-Token': '<%= form_authenticity_token %>'
    },
    // This is the actual data I'm sending to the POST request. vote: vote turns into vote: "ugly" for example.
    body: JSON.stringify({ vote: vote })
    // Promise Handler. Runs once the server sends back a response. Response is the reply from /vote URL endpoint
  }).then(response => {
    // response.ok checks to see if server said "Success!"
    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
      // If the response is 'success', redirect page to / end point with ?new_color=true params.
      // Does this trigger Rails app to show a new color on page load?
      window.location.href = `/?new_color=true&last_vote=${vote}`;
      // If response fails, show the alert to the user.
    })
    .catch(error => {
    console.error("Vote submission failed:", error);
  });
}

// Drag and drop
document.addEventListener("turbo:load", function () {
  if (document.getElementById('ugly_colors_list')) {
    new Sortable(document.getElementById('ugly_colors_list'), {
      group: 'ugly',
      onEnd: function(evt) {
        updatePosition('ugly_colors_list', evt.newIndex, evt.oldIndex);
      }
    });
  }

  if (document.getElementById('nice_colors_list')) {
    new Sortable(document.getElementById('nice_colors_list'), {
      group: 'nice',
      onEnd: function(evt) {
        updatePosition('nice_colors_list', evt.newIndex, evt.oldIndex);
      }
    });
  }
});

// Update position for drag and drop
function updatePosition(listId, newIndex, oldIndex) {
  const list = document.getElementById(listId);
  const orderedIds = Array.from(list.querySelectorAll('li')).map((li) => li.dataset.id);

  fetch('/update_position', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= form_authenticity_token %>'
    },
    // Data I'm sending
    body: JSON.stringify({
      ordered_ids: orderedIds,
    })
  }).then(response => {
    if (response.ok) {
      const items = list.querySelectorAll('li');
      items.forEach((item, index) => {
        item.querySelector('.position-number').textContent = index + 1; 
      });
    } else {
      alert('Failed to update order');
    }
  });
}

// Timer for notice and messages
document.addEventListener("turbo:load", () => {
  const notice = document.getElementById("flash-notice");
  if (notice) {
    setTimeout(() => {
      notice.style.transition = "opacity 1s ease";
      notice.style.opacity = "0";
      setTimeout(() => notice.remove(), 1000);
    }, 3000);
  }

  const message = document.getElementById("custom-message");
  if (message) {
    setTimeout(() => {
      message.style.transition = "opacity 1s ease";
      message.style.opacity = "0";
      setTimeout(() => message.remove(), 1000);
    }, 3000);
  }
});

</script>

<!-- This is Sortable.js library to allow for drag-and-drop functionality -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
